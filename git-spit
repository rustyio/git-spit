#!/usr/bin/env ruby

require 'uri'

### Logging ###

def log(s, prefix = nil)
  s.lines.each do |line|
    if prefix
      print color("[#{prefix}] ", :yellow)
    else
      print color("[local] ", :green)
    end
    print "#{line.strip}\n"
  end
end

def color(s, color)
  color_code = {
    :red    => 31,
    :green  => 32,
    :yellow => 33
  }[color]
  "\e[0;#{color_code}m#{s}\e[0m"
end

def success?
  return $?.exitstatus == 0
end

class Remote
  attr_accessor :name
  attr_accessor :user
  attr_accessor :host
  attr_accessor :port
  attr_accessor :path

  def initialize(name, user, host, port, path)
    self.name = name
    self.user = user || `whoami`.strip
    self.host = host
    self.port = (port || 22).to_i
    self.path = normalize_path(path)
  end

  def endpoint
    "ssh://#{user}@#{host}:#{port}/#{path}"
  end

  def ssh(s, chdir = true)
    if chdir
      log `ssh #{user}@#{host} -p #{port} '(cd #{escape_path(path)} && #{s})' 2>&1`, name
    else
      log `ssh #{user}@#{host} -p #{port} '#{s}' 2>&1`, name
    end
    success? or exit_loudly
  end

  def scp(local_file, remote_file)
    log `scp -P #{port} #{escape_path(local_file)} #{user}@#{host}:#{escape_path(remote_file)}`, name
    success? or exit_loudly
  end

  def git_push(ref)
    # This handles fast-forwards and new branches.
    s = `git push #{endpoint} #{ref}:#{ref} 2>&1`

    # If that didn't work, then try a force-with-lease. This handles
    # when we've changed history.
    unless success?
      log "Trying --force-with-lease."
      s = `git push --force-with-lease=#{ref} #{endpoint} #{ref}:#{ref} 2>&1`
    end

    # Whatever happens, log the result.
    log s, name
    success? or exit_loudly
  end

  def escape_path(path)
    path.gsub(' ', '\ ')
  end

  def normalize_path(path)
    if path.start_with?("/~")
      path.slice!(0)
    end

    return path
  end

  def exit_loudly(s = nil)
    raise s || "Exiting."
  end
end

### Timing ###

def start_timer
  @last_time = Time.now
end

def elapsed_time
  t = (Time.now - @last_time)
  @last_time = Time.now
  return t
end


### Git ###

def find_remote_endpoint(name)
  # Locate the remote url.
  next_url = false
  url = nil
  IO.read(".git/config").lines.each do |line|
    if /remote\s+"#{name}"/.match(line)
      next_url = true
    end

    if next_url && m = /url\s*=(.*)/.match(line)
      url = m[1].strip
      break
    end
  end

  if url.nil?
    return
  end

  begin
    # Parse ssh url.
    uri = URI(url)
    raise "#{url} is not an SSH endpoint." unless uri.scheme == "ssh"
    return Remote.new(name, uri.user, uri.host, (uri.port || "22").to_i, uri.path)
  rescue URI::InvalidURIError => e
    # Parse scp url, e.g. "user@server:path/to/repo"
    /(.+)@(.+):(.+)/.match(url) do |m|
      return Remote.new(name, m[1], m[2], nil, m[3])
    end

    # Parse scp url, e.g. "server:path/to/repo"
    /(.+):(.+)/.match(url) do |m|
      return Remote.new(name, nil, m[1], nil, m[2])
    end
  end

  raise "Could not interpret URL '#{url}'"
end

def get_current_ref
  return IO.read(".git/HEAD").gsub("ref:", "").gsub("refs/heads/", "").strip
end

def git_status()
  paths = []
  index_status = `git status --porcelain`
  index_status.lines.each do |line|
    if m = /.\s+(.*)/.match(line.strip)
      paths << m[1]
    end
  end

  return paths.uniq
end

def is_git_head?(path)
  /\.git\/HEAD/.match(path)
end

def is_git_ref?(path)
  /\.git\/refs\/heads\//.match(path)
end


### SSH & SCP ###

def update_remote_head(remote, ref)
  log "Updating remote head to #{ref}."

  # Allow us to push to the currently checked out branch.
  remote.ssh("git config --local receive.denyCurrentBranch false")

  # Push latest commit.
  remote.git_push(ref)

  # Pushing to a checked out branch can sometimes add files to the
  # index. Reset the index.
  remote.ssh("git reset")

  # Checkout the latest ref. Don't do any kind of forcing, just in
  # case there were remote edits.
  remote.ssh("git checkout #{ref}")
end

def update_remote_file(remote, file)
  elapsed_time()
  remote_file = File.join(remote.path, file)

  # Ensure the directory exists.
  remote.ssh("mkdir -p #{remote.escape_path(File.dirname(remote_file))}", false)

  # Copy the file.
  remote.scp(file, remote_file)
  log "Updated remote file: #{file} (%0.2f s)" % elapsed_time()
end

def update_all_remote_files(remote, files)
  files.each do |file|
    update_remote_file(remote, file)
  end
end

def delete_remote_file(remote, file)
  elapsed_time()
  remote.ssh("rm -f #{remote.escape_path(file)}")
  log "Deleted remote file: #{file} (%0.2f s)" % elapsed_time()
end


### File Events ###

def get_file_state(path)
  if !File.exists?(path)
    return nil
  end

  return {
    :size  => File.size(path),
    :mtime => File.mtime(path)
  }
end

def detect_file_event(old_state, new_state)
  # Nothing to do.
  if old_state == new_state
    return
  end

  # Check if deleted.
  if new_state.nil?
    return :deleted
  end

  # Check if new.
  if old_state.nil?
    return :new
  end

  return :modified
end

def handle_file_events(paths, states, &block)
  file_paths = []
  (paths + states.keys).each do |path|
    if File.directory?(path)
      Dir[File.join(path, "**", "*")].each do |inner_path|
        next if File.directory?(inner_path)
        file_paths << inner_path
      end
    else
      file_paths << path
    end
  end

  file_paths.uniq.each do |path|
    # Get the states, detect the event.
    old_state = states[path]
    new_state = get_file_state(path)
    event = detect_file_event(old_state, new_state)

    # Save the new state.
    if new_state
      states[path] = new_state
    else
      states.delete(path)
    end

    # Call the block.
    block.call(path, event)
  end
end


### MAIN ###

# Begin the timer.
start_timer()

# Detect the remote endpoint.
base_path = (File.expand_path(".") + "/").gsub("//", "/")
remote_name = ARGV[0] || "origin"
remote = find_remote_endpoint(remote_name)
if remote.host.nil? || remote.path.nil?
  remote.name = ARGV[0]
  remote.host = ARGV[0]
  remote.path = ARGV[1]
end

log "Monitoring #{base_path}"
log "Spitting to #{remote.name}"
log "- #{remote.endpoint}"

# Update the remote repo to be the same as the local repo.
current_ref = get_current_ref
update_remote_head(remote, current_ref)


git_file_states = {}
code_file_states = {}

while true
  # Handle branch changes and commits.
  git_paths = [".git/HEAD"] + Dir[".git/refs/heads/*"]
  handle_file_events(git_paths, git_file_states) do |path, event|
    # Handle branch changes.
    if is_git_head?(path) && event == :modified
      current_ref = get_current_ref
      update_remote_head(remote, current_ref)
    end

    # Handle commits.
    if is_git_ref?(path) && event == :modified
      current_ref = get_current_ref
      if path.index(current_ref)
        update_remote_head(remote, current_ref)
      end
    end
  end

  # Handle code file changes.
  code_paths = git_status()
  handle_file_events(code_paths, code_file_states) do |path, event|
    # Handle new or modified events.
    if (event == :new || event == :modified)
      update_remote_file(remote, path)
    end

    # Handle deleted events.
    if (event == :deleted)
      delete_remote_file(remote, path)
    end
  end

  sleep 0.5
end
